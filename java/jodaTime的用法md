#### Joda-Time 

##### Joda-Time配置(spring -boot中使用)

* 在`pom.xml`添加依赖（如果发生冲突，请注意版本)

> 

> 

>```xml
><dependency>
>    <groupId>joda-time</groupId>
>    <artifactId>joda-time</artifactId>
></dependency>
><dependency>
>    <groupId>org.jadira.usertype</groupId>
>    <artifactId>usertype.extended</artifactId>
>    <version>5.0.0.GA</version>
></dependency>
>```

* 在`applivation.properties`文件中配置

>```properties
>spring.jpa.properties.jadira.usertype.autoRegisterUserTypes = true
>```

* 在`pom.xml`添加``json``数据格式,前台日期可以以json形式传入后台

>```xml
><dependency>
>       <groupId>com.fasterxml.jackson.datatype</groupId>
>       <artifactId>jackson-datatype-joda</artifactId>
></dependency>
>```

* 前台传入格式

>```json
>{"fullTime":"2018-11-05T10:00:00","birthdayDate":"1996-10-01"}
>
>```

* 后台实体类

>```java
>// DATETIME 类型字段 (MySQL)格式：年月日 时分秒
>private DateTime fullTime;
>
>// LocalDate 类型字段 (MySQL) 格式：年月日，不关注时间具体
>private LocalDate birthdayDate;
>```

##### joda-time具体

* 介绍

>一个面向 `Java™ `平台的易于 使用的开源时间/日期库。JodaTime能轻松化解处理日期和时间的痛苦和繁琐。 

* 优点

>1. `Joda-Time `令时间和日期值变得易于管理、操作和理解。
>2. 易于使用。包括可扩展性、完整的特性集以及对多种日历系统的支持。
>3. `Joda `与 `JDK `是百分之百可互操作的

###### DateTime

>```java
>package com.tong.school_chat.Controller;
>
>import org.joda.time.DateTime;
>
>import java.util.Calendar;
>import java.util.Date;
>import java.util.logging.SimpleFormatter;
>
>/**
> * @author Tongch
> * @version 1.0
> * @time 2018/11/5 10:08
> */
>public class TestJoda {
>    public static void main(String[] args) {
>        
>        //无参时，得到当前系统时间，精确到毫秒
>        DateTime dateTime = new DateTime();
>        System.out.println(dateTime);
>        
>        //传入jdk的时间对象
>        dateTime = new DateTime(new Date());
>        System.out.println(dateTime.toString("yyyy-MM-dd HH:mm:ss"));
>        
>        //传入自定义的年月日
>        dateTime = new DateTime(2018, 10, 10, 5, 23, 2);
>        System.out.println(dateTime);
>        
>        //传入Calendar对象
>        dateTime = new DateTime(Calendar.getInstance());
>        System.out.println(dateTime);
>        
>        //传入时间戳
>        dateTime = new DateTime(new Date().getTime());
>        System.out.println(dateTime);
>        
>        //传入String类型的时间
>        String timeString = "2006-01-26T13:30:00-06:00";
>        dateTime = new DateTime(timeString);
>        System.out.println(dateTime);
>        
>    }
>}
>
>```

* 结果

>```java
>2018-11-05T10:21:19.683+08:00
>2018-11-05 10:21:19
>2018-10-10T05:23:02.000+08:00
>2018-11-05T10:21:19.882+08:00
>2018-11-05T10:21:19.898+08:00
>2006-01-27T03:30:00.000+08:00
>```

* 例子

>```java
>package com.tong.school_chat.Controller;
>
>import org.joda.time.DateTime;
>
>import java.util.Date;
>
>/**
> * @author Tongch
> * @version 1.0
> * @time 2018/11/5 10:08
> */
>public class TestJoda {
>    public static void main(String[] args) {
>        
>        
>        //将一个日期添加90天，打印
>        DateTime dateTime = new DateTime(new Date());
>        System.out.println(dateTime.plusDays(90).toString("yyyy-MM-dd HH:mm:ss"));
>        
>        
>        //距离 2018/11/5日 45 天之后的某天在下一个月的当前周的最后一天的日期。
>        System.out.println(dateTime.plusDays(45).plusMonths(1).dayOfWeek()
>                .withMaximumValue().toString("yyyy-MM-dd HH:mm:ss"));
>        
>    }
>}
>
>```
>
>

###### LocalDate

* 概念

>该类封装了一个年/月/日的组合。当地理位置（即时区）变得不重要时，使用它存储日期将非常方便。 例如，某个特定对象的出生日期 可能为 1999 年 4 月 16 日，但是从技术角度来看， 在保存所有业务值的同时不会了解有关此日期的任何其他信息（比如这是一周中的星期几，或者这个人出生地所在的时区）。 在这种情况下，应当使用 LocalDate。 

>```java
>//只需要年月日的时候
>        LocalDate localDate = new LocalDate(2018, 11, 5);
>        System.out.println(localDate);
>        
>```



###### LocalTime

* 概念

>这个类封装一天中的某个时间，当地理位置不重要的情况下，可以使用这个类来只存储一天当中的某个时间。 例如，晚上 11:52 可能是一天当中的一个重要时刻（比如，一个 cron 任务将启动，它将备份文件系统的某个部分）， 但是这个时间并没有特定于某一天，因此我不需要了解有关这一时刻的其他信息。 

>```java
> //只需要时分秒毫秒的时候
>        LocalTime localTime = new LocalTime(13, 30, 26, 0);// 1:30:26PM
>        System.out.println(localTime);
>```

###### 与jdk日期切换

>```java
>        DateTime dateTime = new DateTime(new Date());
>		//通过把DateTime格式的日期转换成时间戳，在进行切换
>        Date date = new Date(dateTime.getMillis());
>        System.out.println(date);
>```

###### DateTime日期的格式化

* 要格式化一个`Joda`对象，调用他的==toString()== 方法，并且可以传递一个标准的控制字符串，告诉jdk如何执行格式化，而不需要单独的创建==SimpleDateFormat==，虽然``joda``提供了``DateTimeFormatter``类

>```java
>DateTime dateTime = DateTime.now();
>        System.out.println(dateTime.toString("MM/dd/yyyy hh:mm:ss.SSSa"));
>        System.out.println(dateTime.toString("dd-MM-yyyy HH:mm:ss"));
>        System.out.println(dateTime.toString("EEEE dd MMMM, yyyy HH:mm:ssa"));
>        System.out.println(dateTime.toString("MM/dd/yyyy HH:mm ZZZZ"));
>        System.out.println(dateTime.toString("MM/dd/yyyy HH:mm Z"));
>        System.out.println(dateTime.toString("yyyy-MM-dd HH:mm:ss"));
>    
>        System.out.println(dateTime.toString(ISODateTimeFormat.basicDateTime()));
>        System.out.println(dateTime.toString(ISODateTimeFormat.basicDateTimeNoMillis()));
>        System.out.println(dateTime.toString(ISODateTimeFormat.basicOrdinalDateTime()));
>        System.out.println(dateTime.toString(ISODateTimeFormat.basicWeekDateTime()));
>
>```

* 结果

>```properties
>11/05/2018 10:48:49.390上午
>05-11-2018 10:48:49
>星期一 05 十一月, 2018 10:48:49上午
>11/05/2018 10:48 Asia/Shanghai
>11/05/2018 10:48 +0800
>2018-11-05 10:48:49
>20181105T104849.390+0800
>20181105T104849+0800
>2018309T104849.390+0800
>2018W451T104849.390+0800
>```

###### 结束语

* 具体对象的方法需自己对照api去使用

>[Joda-Api地址](https://www.joda.org/joda-time/apidocs/index.html)

























